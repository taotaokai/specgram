#include <stdlib.h>
#include <math.h>
#include <complex.h>
#include <fftw3.h>

#include "par.h"
#include "dbg.h"
#include "sac.h"
#include "sacutil.h"

/**** self documentation ****/
char *sdoc[] = {
"NAME",
"    specgram - make spectrogram by S-transform",
"",
"SYNOPSIS",
"    specgram in= out= dt=0.1 fmin=1 fmax=100 nfreq=10 twina=1 sinca=10",
"",
"DESCRIPTION",
"    in=  input sac file name ",
"    out=  output file name",
"    dt=0.1  output time sampling interval (second)",
"    fmin=0.1  minimum frequency (Hz)",
"    fmax=10  maximum frequency (Hz)",
"    nfreq=10  number of frequency samples",
"    twina=1  scaling factor of time window width T(f,a)=a/f",
"    sinca=20  sinc window width for lanczos interpolation",
"",
"COMMETS",
" 1) S-transform, moving time window T(f,a):",
"    X(t,f) = Int[x(s) * g(t-s;T(f,a)) * exp(-I*2*PI*s), {s,-inf,inf}], ",
"      where g(t;T(f,a)) = exp(-2*(t/T(f,a))^2)*sqrt(2)/sqrt(PI)/abs(T), and ",
"      , and T is approximatly the window width(|g|>0.6).",
"    The time window width scales with frequency as T(f,a) = a/f",
"    In frequency domian X(w,f) = Fx(w+2*PI*f) * G(w;T(f,a)), ",
"      where G(w;T) = exp(-(w*T)^2/2), ",
"      Fx(w+2*PI*f) is futher interpolated from discrete frequency samples of ",
"      fft(x(t)). see {Lanczos sinc interpolation} ",
"",
" 2) About further tuning the time window width T(f,a):",
"    Time window width varies from T = a/f to dt with increasing frequency, ",
"    use dt instead of a/f at high frequency end to account for output time sampling interval, ",
"    which limits the minimum time resolution.",
"",
" 3) Output time-frequency samples: ",
"    time: same begin time as input sac file, sampling interval dt, ",
"          the end time is closest to the end time as the input sac file.",
"    frequency: logarithmic scale from fmin to fmax, with nfreq samples including",
"               fmin and fmax",
"",
" 4) Lanczos sinc interpolation(reconstruction):",
"    windowed sinc: L(x) = sinc(x)*sinc(x/a), |x|<=a ",
"                        = 0, |x|>a ",
"    S(x) = sum(L(x-i) * S[i]) ",
"",
" 5) Output file format:",
"    each row is time series |X(t,f)| at one frequency f",
NULL};

/**** shift fft result F to center zero frequency ****/
int fftshift(fftw_complex *F, int nf)
{
  int i, n_nyq;
  fftw_complex *dump=NULL;

  check_mem(dump = malloc(sizeof(fftw_complex)*nf));
  for (i=0;i<nf;i++) dump[i] = F[i];

  n_nyq = (nf+1)/2;

  for (i=0; i<n_nyq; i++) F[i+nf-n_nyq] = dump[i];
  for (i=n_nyq; i<nf; i++) F[i-n_nyq] = dump[i];

  fftw_free(dump);
  return 0;

error:
  fftw_free(dump);
  return -1;
}

/**** shift F back to fft order ****/
int ifftshift(fftw_complex *F, int nf)
{
  int i, n_nyq;
  fftw_complex *dump=NULL;

  check_mem(dump = malloc(sizeof(fftw_complex)*nf));
  for (i=0;i<nf;i++) dump[i] = F[i];

  n_nyq = (nf+1)/2;

  for (i=0; i<n_nyq; i++) F[i] = dump[i+nf-n_nyq];
  for (i=n_nyq; i<nf; i++) F[i] = dump[i-n_nyq];

  fftw_free(dump);
  return 0;

error:
  fftw_free(dump);
  return -1;
}

/**** windowed sinc interpolation of spectrum ****/
#define PI M_PI 

//note the usage of dsincarg=PI*(a) in macro DSINC(a)
static double dsincarg;
#define DSINC(a) ((dsincarg=PI*(a)) == 0.0 ? 1 : sin(dsincarg)/dsincarg )

int lanczos_interp( 
  fftw_complex *F,  double w0,  double dw,  int nw, 
  fftw_complex *Fi, double wi0, double dwi, int nwi, int na)
//interpolate F[w0+i*dw],i=0..nw-1 onto wi0+i*dwi, i=0..nwi-1
//na: window half width in points
{
  fftw_complex sum;
  double d0, nf;
  int i, n0, n1, nn;

  d0 = wi0 - w0;

  //loop each interpolating point
  for (i=0; i<nwi; i++) {

    //get window index range: n0..n1-1
    nf = (d0 + i*dwi)/dw;
    n0 = nf - na;
    n1 = nf + na + 1;
    if (n0 < 0) n0 = 0;
    if (n1 > nw) n1 = nw;

    //loop each point in sinc window
    sum = 0.0;
    for (nn=n0; nn<n1; nn++)
      sum += DSINC(nn-nf) * DSINC((nn-nf)/na) * F[nn];

    Fi[i] = sum;
  }

  return 0;
}


/**** main program ****/
int main(int argc, char *argv[])
{
  /**** define variables ****/

  /* command line arguments */
  char *sacin=NULL;
  char *outfile=NULL;
  double dt1, twina, fmin, fmax;
  int nfreq, sinca;

  /* local variables */
  //sac trace
  sac *tr=NULL;
  //input
  int n0, n0_nyq;
  double dt0, dw0;
  double *w0=NULL;
  fftw_complex *x0=NULL;
  fftw_complex *F0=NULL;
  //output
  int n1, n1_nyq;
  double dw1;
  double *w1=NULL;
  fftw_complex *x1=NULL;
  fftw_complex *F1=NULL;
  //fft
  fftw_plan p_fft=NULL, p_bfft=NULL;
  //other
  int i, ifreq;
  double fc, wc, winlen;
  double log10_fmin, log10_fmax, dlog10_freq;
  FILE * fp_out=NULL;

  /**** get command line arguments ****/
  initargs(argc, argv);
  requestdoc(1);
  //IO files
  if (!getparstring("in",&sacin)) sentinel("must specify in=");
  if (!getparstring("out",&outfile)) sentinel("must specify out=");
  //output time-frequency samples
  if (!getpardouble("dt1",&dt1)) dt1 = 0.1;
  if (!getpardouble("fmin",&fmin)) fmin = 1;
  if (!getpardouble("fmax",&fmax)) fmax = 10;
  if (!getparint("nfreq",&nfreq)) nfreq = 10;
  //S-transform time window length 
  if (!getpardouble("twina",&twina)) twina = 1;
  //sinc window length for interpolation
  if (!getparint("sinca",&sinca)) sinca = 20;

  /**** check command line arguments ****/
  if (nfreq < 1) log_warn("nfreq(%d) should .ge. 1; use 1 instead", nfreq);
  check(fmin > 0, "fmin(%f) must be greater than 0", fmin);
  check(twina > 0, "twina(%f) must be greater than 0", twina);
  check(sinca >= 5, "sinca(%d) should .ge. 5", sinca);

  //open output file
  fp_out = fopen(outfile,"w");

  /**** read input sac file ****/
  check_mem(tr = sacnewn(1));
  sacread(tr, sacin);

  /**** fft of input data ****/
  dt0 = tr->delta;
  n0 = tr->npts;
  dw0 = 2.0*PI/(n0*dt0);

  fprintf(stderr,"# dt0=%f n0=%d dw0=%f\n",dt0,n0,dw0);

  check_mem(x0 = fftw_malloc(sizeof(fftw_complex) * n0));
  check_mem(F0 = fftw_malloc(sizeof(fftw_complex) * n0));
  for (i=0; i<n0; i++) x0[i] = tr->data[i];
  p_fft = fftw_plan_dft_1d(n0, x0, F0, FFTW_FORWARD, FFTW_ESTIMATE);
  fftw_execute(p_fft);

  //for (i=0; i<n0; i++)
  //  fprintf(fp_out,"%e %e\n", creal(x0[i]), tr->data[i]); 

  //w0: frequency samples from minus to positive nyquist frequency 
  check_mem(w0 = malloc(sizeof(double) * n0));
  n0_nyq = (n0+1)/2;
  for (i=0; i<n0; i++) w0[i] = (i+n0_nyq-n0)*dw0;

  //fftshift: shift F0 to center zero frequency
  fftshift(F0, n0);

  //for (i=0; i<n0; i++)
  //  fprintf(fp_out,"%e %e %e\n", w0[i], creal(F0[i]), cimag(F0[i]));

  /**** prepare backward fft for time-frequency transform ****/
  n1 = n0*dt0/dt1;
  dw1 = 2.0*PI/(n1*dt1);

  fprintf(stderr,"# dt1=%f n1=%d dw1=%f\n",dt1,n1,dw1);

  //w1: frequency samples from minus to positive nyquist frequency 
  check_mem(w1 = malloc(sizeof(double) * n1));
  n1_nyq = (n1+1)/2;
  for (i=0; i<n1; i++) w1[i] = (i+n1_nyq-n1)*dw1;

  //for (i=0; i<n1; i++) fprintf(fp_out,"%e \n", w1[i]);

  check_mem(x1 = fftw_malloc(sizeof(fftw_complex) * n1));
  check_mem(F1 = fftw_malloc(sizeof(fftw_complex) * n1));
  p_bfft = fftw_plan_dft_1d(n1, F1, x1, FFTW_BACKWARD, FFTW_ESTIMATE);

  /**** Stockwell transform at each frequency ****/

  //output frequency samples 
  log10_fmin = log10(fmin);
  log10_fmax = log10(fmax);
  if (nfreq <= 1) {
    nfreq = 1;
    dlog10_freq = 0;
  } else {
    dlog10_freq = (log10_fmax - log10_fmin)/(nfreq-1);
  }

  //loop each frequency sample
  for (ifreq=0; ifreq<nfreq; ifreq++) {

    //central frequency
    fc = pow(10, log10_fmin+ifreq*dlog10_freq);
    wc = 2*PI*fc;

    //fprintf(stderr, "# fc=%f wc=%f \n", fc, wc);

    //interpolate F0(w0) -> F1(w1) = F0(w1+wc)
    lanczos_interp(F0, w0[0], dw0, n0, F1, w1[0]+wc, dw1, n1, sinca);

    //for (i=0; i<n1; i++)
    //  fprintf(fp_out,"%e %e %e\n", w1[i]+wc, creal(F1[i]), cimag(F1[i]));

    //Multiply window function G(w1;T(fc,a)) = exp(-2*(w1*T)^2)
    winlen = twina/fc;
    //fprintf(stderr,"# winlen=%f\n", winlen);
    winlen = sqrt(1.0 + pow(winlen/dt1,2))*dt1;
    //fprintf(stderr,"# winlen=%f\n", winlen);
    for (i=0; i<n1; i++) {
      F1[i] *= exp(-pow(w1[i]*winlen,2)/2);
      //fprintf(fp_out,"%e %e %e \n", w1[i]+wc, creal(F1[i]), cimag(F1[i]));
    }

    //shift F1 back to put zero frequency back at first element
    ifftshift(F1,n1);

    //for (i=0; i<n1; i++) fprintf(fp_out,"%e %e \n", creal(F1[i]), cimag(F1[i]));

    //ifft(F1)
    fftw_execute(p_bfft);

    //correct the amplitude (1/npts)
    //because fftw_backward is the same as fft except with opposite sign
    for (i=0; i<n1; i++) x1[i] = x1[i]/n1;

    //output abs(x1) = abs(Sf(t,fc))
    fprintf(fp_out, "%e ", fc);
    for (i=0; i<n1; i++) fprintf(fp_out, "%e ", cabs(x1[i]));
    fprintf(fp_out, "\n");
  }

  /**** finalize ****/
  sacfreen(tr,1);
  fftw_destroy_plan(p_fft); fftw_destroy_plan(p_bfft);
  free(w0); fftw_free(x0); fftw_free(F0);
  free(w1); fftw_free(x1); fftw_free(F1);
  fclose(fp_out);
  return 0;

error:
  sacfreen(tr,1);
  fftw_destroy_plan(p_fft); fftw_destroy_plan(p_bfft);
  free(w0); fftw_free(x0); fftw_free(F0);
  free(w1); fftw_free(x1); fftw_free(F1);
  if (fp_out) fclose(fp_out);
  return -1;
}
